(()=>{"use strict";class t{constructor(t,s){this.pattern=t,this.at=s}}class s{constructor(t,s){this.alias=s,this.id=class{static randID(t){for(var s="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",n=e.length,r=0;r<t;r++)s+=e.charAt(Math.floor(Math.random()*n));return s}}.randID(20),this.texture=t,this.connectsTo=[]}}class e{constructor(){this.north=!1,this.west=!1,this.south=!1,this.east=!1,this.everywhere=()=>this.atEast().atNorth().atSouth().atWest(),this.atSouth=()=>(this.south=!0,this),this.atEast=()=>(this.east=!0,this),this.atWest=()=>(this.west=!0,this),this.atNorth=()=>(this.north=!0,this),this.reset=()=>new e}static connect(){return new e}static check(t,s){return!!(t.east&&s.west||t.west&&s.east)||!!(t.north&&s.south||t.south&&s.north)}}class n extends s{constructor(){super("grass.png","grass")}setConnections(){let s=i.getPatterns();this.connectsTo=[new t(s.grass,e.connect().everywhere()),new t(s.light_forest,e.connect().everywhere())]}}class r extends s{constructor(){super("heavy-forest.png","heavy_forest")}setConnections(){let s=i.getPatterns();this.connectsTo=[new t(s.heavy_forest,e.connect().everywhere()),new t(s.light_forest,e.connect().everywhere())]}}class h extends s{constructor(){super("light-forest.png","light_forest")}setConnections(){let s=i.getPatterns();this.connectsTo=[new t(s.grass,e.connect().everywhere()),new t(s.light_forest,e.connect().everywhere()),new t(s.heavy_forest,e.connect().everywhere())]}}class a extends s{constructor(){super("","null"),this.connectsTo=[]}setConnections(){}}const i=new class{constructor(){this.patterns={grass:new n,light_forest:new h,heavy_forest:new r,null:new a}}startConnections(){for(let t in this.patterns)this.patterns[t].setConnections()}getPatterns(){return this.patterns}};class o{constructor(t,s){this.allPatterns=i.getPatterns(),this.pattern=this.allPatterns.null,this.availablePatterns={},this.neighbors=[],this.x=t,this.y=s;for(let t in this.allPatterns)this.availablePatterns[t]={pattern:this.allPatterns[t],available:!0}}setNeighboors(t){this.neighbors=t}choosePattern(t){for(let s of this.neighbors){if(s.pattern==this.allPatterns.null)break;for(let e of s.pattern.connectsTo)t.alias,e.pattern.alias}if(!this.availablePatterns[t.alias].available)throw Error("Pattern not available");this.pattern=this.availablePatterns[t.alias].pattern}}i.startConnections(),console.log("hi");let l=new class{constructor(t,s){this.cells=[],this.propagateToCells=()=>{},this.generateGrid=()=>{for(let t=0;t<this.length;t++){this.cells[t]=[];for(let s=0;s<this.height;s++)this.cells[t][s]=new o(t,s)}for(let t=0;t<this.length;t++)for(let s=0;s<this.height;s++){let e=[];t-1>=0&&e.push(this.cells[t-1][s]),s-1>=0&&e.push(this.cells[1][s-1]),t+1<this.length&&e.push(this.cells[t+1][s]),s+1<this.length&&e.push(this.cells[t][s+1]),this.cells[t][s].setNeighboors(e)}},this.length=t,this.height=s}}(10,10);l.generateGrid(),console.log(l)})();
//# sourceMappingURL=bundle.js.map